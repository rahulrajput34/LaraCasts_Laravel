Lecture 1: 
learn about the herd, How to start a basic project of laravel



Lecture 2:
Learn how can we create the route and what are the different thing we can return inside the routes
like if we return the string it will direct display the value of the string on the website
if we return the array from there it will display the json data over there
if we return the blade file name from there then it will display the ui of the blade file on the website



Lecture 3:
we learn the what is the difference between the simple .php file and blade file
when we create the blade file then it can be converted to the component based architecture in .php we are Not
Also learn the use of slot in blade



Lecture 4:
Learn the attributes, its just similar as a slot but its use for passing the default css
Then learn something about the tailwind css
And How can we pass the more than one slot 


Lecture 5:
learn more on tailwind 
=>
learn about the difference between the props and attributes
active is a boolean prop controlling the link’s “active” styling and aria-current attribute.
$attributes is a catch-all for any extra attributes (e.g., href, classes) passed into the component.



Lecute 6:
Creating the data for the jobs and Display on the UI
learn some more about the router and blade.php


Lecture 7: 
We are put the data we defined inside the separate class inside the Modals and get to know about that how the modals are helpful
Also learn about how can we define all the separate task of the routes inside the modal as a class method
How to display the ERROR



Lecture 8:
How to create the database in the  My Table
How to connect this project to that database
Understand the how we can create the table using the php migration

pros of migration
==> we do not need to look at the structure of the database by going to each table
==> By the script we can direct Understand the structure    
Schema::create('users', function (Blueprint $table)
Here the first one is our database name


==> we can check it by just give the command php artisan
migrate:fresh             Drop all tables and re-run all migrations
  migrate:install           Create the migration repository
  migrate:refresh           Reset and re-run all migrations ==> not gonna do in production
  migrate:reset             Rollback all database migrations
  migrate:rollback          Rollback the last database migration
  migrate:status            Show the status of each migration


php artisan make:migration

  What should the migration be named?
❯ create_job_listings_table

This would create the table named job_listings
When we migrate it

If we want to run all the new migration which we created 
php artisan migrate



Lecture 9:
Learning about the Eloquent
Eloquent is ORM

ORM stands for Object-Relational Mapping. It's a programming technique used to interact with a database in an object-oriented way. Essentially, it allows developers to work with database records using classes and objects instead of writing raw SQL queries.

Benefits of ORM
Developer Productivity: Simplifies database interactions and reduces boilerplate code.
Database Agnosticism: Makes it easier to switch between different database systems.
Readability: Code is easier to read and maintain compared to raw SQL.

To convert the modal into the Eloquent modal we extends to the Modal class

Means we can use the all the methods available inside the modal and interact with the table data inside the very simple way 

=> To play it with the given things we can use this below command
php artisan tinker

But when we try to play with the data of the table that time laravel gives the automatic protection so someone can't change the data of the table

Illuminate\Database\Eloquent\MassAssignmentException  Add [title] to fillable property to allow mass assignment on [App\Models\Job].

This is the error we got

Still If we want to play around the data by tinker then we need to manually change the property of that behavior.


==> it will explains the any command we pass
php artisan help make:modal


==> from the command we can do many things together and we can add any particular thing
==> There are some of the examples of that
Generate a migration, seeder, factory, policy, resource controller, and form request classes for the model
-a, --all             

Create a new controller for the model
-c, --controller      

Create a new factory for the model
-f, --factory

==> To create the Model and the migration together
php artisan make:model Jobs -m


TODO: Lecture 10: Factory

==> we are using it for generating the  dummy data

==> We can create the users by giving the permission inside Models/User.php and inside the tinker running the command

App\Models\User::factory()->create() 

What if we want to create the 50 dummy records

App\Models\User::factory(50)->create() 


==> To create the new factory
php artisan make:factory

  What should the factory be named?
❯ JobFactory

Here we provide the name of the model and then factory JobFactory means Job is the model name and the Factory is for the  factory

==> Now we got the salaries inside the different values But what if we want the same from the template from the factory but just want to change the one value whenever needed that time we give the values inside the unverified and us it

==> So What I need to do is to inside the JobFactory I need to pass the logic of it inside the unverified In create it inside the tinker as we creates the dummy data

==> Create the Employer modal and migration together
php artisan make:model Employer -m

=> Now we want to pass the  Employer as a foreign key over here
We gave the value unsignedInteger because when we create the foreign id of the employee That time we need to pass the value of the  inside this table according to this table id. 
Else: we can give 
'employer_id' => Employer::factory(),

=> Now we can generates the data and give the relationship between  the employee and user as well



TODO: Lecture 11
Now we have the access of the job But we want to access the employer from the job
Conman sense => Whenever we run the any modal method to get the any data from the database or put into the database it behind the scene runs the sql query

=> Inside the tinker we first run the command 
 $job = App\Models\Job::first();

 Then we run the
 $job->employer;

 Then we run the 
 $job->employer->name;

 So, it retrieves the first Job record, accesses the related employer for that job, and then fetches the name attribute of the employer

 In order to do that between each query it must wait and this concept is called the Lazy loading inside the laravel

=> Lazy Loading (Default Behavior)
When you execute $job = App\Models\Job::first();, it fetches the first record from the jobs table.

When you call $job->employer;, Laravel notices that the employer relationship hasn't been loaded yet, so it performs a separate query to fetch the related employer record.

Similarly, when you call $job->employer->name;, the employer record is already loaded, so it simply retrieves the name attribute without another query.



===> We can also get the Value of the employer and get the value of jobs which is posted by that particular employer
-- we can run the same query for the employer and do all these things
-- We need to pass all the methods for that inside the employer method 

==> Get the first employer
$employer = App\Models\Employer::first(); 

==> Collection of the job
$emplyer->jobs;  



This is how we can retrieve the employer from the job and jobs from the employer because of the relationship between them



📘TODO:  Lecture 12: Pivot Tables and BelongsToMany Relationships
> **A pivot table** is a table used in relational databases to establish a many-to-many relationship between two other tables.

- 📌 **A job can have multiple tags.**
- 📌 **A tag can belong to multiple jobs.**



⚙️ Steps to Create and Manage Pivot Tables:
1. 🛠️ **Create the Pivot Table**:
   - Add the constraints.
   - Use `cascade` on delete so that if one is deleted, the related ones are deleted automatically.


2. 🖥️ **Enable Foreign Keys**:
   - Run the command:
     ```sql
     PRAGMA foreign_key=on;
     ```
   - **Check if the query runs perfectly:**
     ```sql
     PRAGMA foreign_key;
     ```
     - **Output `1`:** Query ran successfully.
     - **Output `0`:** Query did not run successfully.


3. 🗂️ **Define Foreign Keys in Code**:
   - After the above steps, define all the foreign key constraints in the code.
   - Manually specify foreign keys where required.



🔗 Attach and Retrieve Foreign Key Values:
- **Attach another ID as a foreign key**:
  ```php
  $tag->jobs()->attach(App\Models\Job::find(7));
  ```

- **Get current values**:
  ```php
  $tag->jobs()->get();
  ```

---

📝 Important Note:
> **Whenever I want to define the foreign key is inside the migration, and whatever the relationship of that foreign key is, I need to define it inside the Model class.**

---

⚠️ Be Careful When Creating Foreign Key Constraints:
1. **Create the Migration**:
   - Define the schema in the migration.

2. **Run the Migration**:
   - Use `php artisan migrate`.

3. **Create the Model**:
   - Define the foreign key relationships in the model.

4. **Review Names**:
   - Check which values need to be rewritten and which Laravel handles correctly.

5. **Verify Relationships**:
   - Review each relationship to determine which require manual changes to foreign keys.


========================>     🧩 Additional Notes    <=========================
📝 How does Laravel name tables?

Laravel automatically names tables based on the model name:
A model called Job will create a table named jobs.
A model called Tag will create a table named tags.
For pivot tables (tables connecting two other tables), Laravel combines the model names alphabetically:
For example, Job and Tag will create a pivot table called job_tag.
Why is this important?

If you don’t follow these naming rules, you’ll need to manually tell Laravel the correct table names.



📚 Other important Laravel rules:
Default Primary Key:

Laravel expects every table to have a column called id as the primary key.
If you use a different name, you must tell Laravel in the model.
Timestamps:

Laravel adds two special columns to every table:
created_at to show when the row was created.
updated_at to show when the row was last updated.
If you don’t want these columns, you can turn them off in the model.
Foreign Key Names:

Laravel expects foreign keys to follow this format: {table_name}_id.
For example, in the jobs table, a foreign key for employers would be called employer_id.
If your foreign key has a different name, you need to tell Laravel.
Custom Table Names:

If your table name doesn’t follow Laravel’s rules, you need to let Laravel know by specifying the table name in the model.


TODO: Lecture 13
Eager loading and the N+1 problem

==> To set the debug bar for the laravel
composer require barryvdh/laravel-debugbar --dev


==> When I want to display each the employer with their job on the webpage
<div >{{ $job->employer->name }}</div>
Its gonna run the query every time we want to fetch the record
Like if I 13 employee with their jobs inside the database and when I want to fetch them that time every time I fetch the record it gonna run the query and this is not the good practice to the query each time
==> This problem is called N + 1 problem  

$jobs = Job::all(); 
job with the relationship name and then get
$jobs = Job::with('employer')->get();   

instead of the first one we use the second one and get rid of the problem of the lazy loading

==> We can also disable the lazy loading in our whole database by just adding a below line inside the Providers/AppServiceProvider.php
Model::preventLazyLoading();


TODO: Lecture 14
Pagination

==> When we do the Job::with('employer')->get() it gonna get the all the records which are available inside the database it might not be good practice some time

==> To get rid or this concept we are using the concept of the pagination over here
==> Pagination gonna get the limited number of the data we want from the database wherever we needed we do not to fetch all the data

$jobs = Job::with('employer')->paginate(3);   

And just add the blade
{{ $jobs->links() }}

It will show the good UI and pagination



We can also access this pagination folder to change the UI of that if we want
==>
php artisan vendor:publish

Then select whatever you want here we want the pagination



There is also a one small issue over there if we have many record then showing the page number for all not make sense because its gonna take the time to load we can change it from the tailwind file we got from the above command

we can also use the simplePaginate method
We can also use the cursorPaginate method

For too many of records the cursorPaginate is the best option to choose

TODO: Lecture 15:
Database Seeders

==> If we want to drop all the table and create all the table again that time we run the below command
php artisan migrate:fresh

==> After doing this we need to pass all the value again using factory function for the each tables
This is not a good thing to do that

So inside the seeders we give all the data we want and whenever we want drop a table we get all the dummy data from just one command

==> We usually creates the different seeder files for the different data to separate things properly
==> To create a new seeder


php artisan make:seeder


We can also run the particular class of the seeder by passing the command
php artisan db:seeder --class=JobSeeder

