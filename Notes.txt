Lecture 1: 
learn about the herd, How to start a basic project of laravel

Lecture 2:
Learn how can we create the route and what are the different thing we can return inside the routes
like if we return the string it will direct display the value of the string on the website
if we return the array from there it will display the json data over there
if we return the blade file name from there then it will display the ui of the blade file on the website

Lecture 3:
we learn the what is the difference between the simple .php file and blade file
when we create the blade file then it can be converted to the component based architecture in .php we are Not
Also learn the use of slot in blade


Lecture 4:
Learn the attributes, its just similar as a slot but its use for passing the default css
Then learn something about the tailwind css
And How can we pass the more than one slot 


Lecture 5:
learn more on tailwind 
=>
learn about the difference between the props and attributes
active is a boolean prop controlling the link’s “active” styling and aria-current attribute.
$attributes is a catch-all for any extra attributes (e.g., href, classes) passed into the component.



Lecute 6:
Creating the data for the jobs and Display on the UI
learn some more about the router and blade.php


Lecture 7: 
We are put the data we defined inside the separate class inside the Modals and get to know about that how the modals are helpful
Also learn about how can we define all the separate task of the routes inside the modal as a class method
How to display the ERROR



Lecture 8:
How to create the database in the  My Table
How to connect this project to that database
Understand the how we can create the table using the php migration

pros of migration
==> we do not need to look at the structure of the database by going to each table
==> By the script we can direct Understand the structure    
Schema::create('users', function (Blueprint $table)
Here the first one is our database name


==> we can check it by just give the command php artisan
migrate:fresh             Drop all tables and re-run all migrations
  migrate:install           Create the migration repository
  migrate:refresh           Reset and re-run all migrations ==> not gonna do in production
  migrate:reset             Rollback all database migrations
  migrate:rollback          Rollback the last database migration
  migrate:status            Show the status of each migration


php artisan make:migration

  What should the migration be named?
❯ create_job_listings_table

This would create the table named job_listings
When we migrate it

If we want to run all the new migration which we created 
php artisan migrate